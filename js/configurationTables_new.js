var parameterNames = [
    "Тип конфлікту",
    "Тип використовуваної зброї",
    "Що призвело до конфлікту",
    "Сектори враження",
    "Тривалість конфлікту",
    "Умови проживання",
    "Переважний характер жертв",
    "Сторона-супротивник",
    "Причини виникнення конфлікту"
];

var alternativeNames = [
    [
        "Внутрішній конфлікт",
        "Регіональний конфлікт",
        "Військовий конфлікт між двома територіально розподіленими державами",
        "Тероризм",
        "Вітчизняна війна",
        "'Холодна війна'",
        "Світова війна"
    ],
    [
        "Стрілецька зброя/гранати",
        "Вибухівка/міни",
        "Хімічна/біологічна зброя",
        "Ядерна зброя",
        "Бронетехніка",
        "Авіація",
        "Артилерія/ракетна зброя",
        "Запалювальна зброя"

    ],
    [
        "Напруженість у стосунках між державами",
        "Замах/загроза/усунення керівної особи",
        "Порушення територіальних кордонів"
    ],
    [
        "Сільське господарство",
        "Інфраструктура",
        "Області проживання населення",
        "Виробництво",
        "Видобування ресурсів та вироб. енергії"
    ],
    [
        "Короткий ( до 0.5 року)",
        "Середній ( 1 - 2 роки)",
        "Тривалий (до 5 років)",
        "Постійний (до 10 років)"
    ],
    [
        "Проживання в умовах забруднення",
        "Проживання в умовах ведення військових дій",
        "Проживання на територіях, з руйнуваннями",
        "В умовах недостатнього постачання води/їжі"
    ],
    [
        "Загиблі",
        "Немає загиблих/вогнепальні поранення",
        "Немає загиблих/Опіки/враження зору/органів дихання"

    ],
    [
        "Розвинена з великими територіальними та людськими ресурсами",
        "Країна, що розвивається",
        "Країна 'третього світу'",
        "Коаліція країн"
    ],
    [
        "Ресурси",
        "Політика",
        "Етичні, релігійні, культурні суперечки",
        "Незадоволеність населення внутр. устроєм",
        "Боротьба за незалежність",
        "Боротьба за владу і захоплення нових територій"
    ]
];

var alternativeValues = [
    [
        0.6, 0.8, 0.3, 0.4, 0.7, 0.4, 0.1
    ],
    [
        0.8, 0.5, 0.1, 0.05, 0.7, 0.3, 0.7, 0.2
    ],
    [
        0.7, 0.6, 0.7
    ],
    [
        0.5, 0.8, 0.6, 0.3, 0.3//in a conflict 4.6 and 4.7 mustn't be stopped
    ],
    [
        0.5, 0.7, 0.6, 0.4
    ],
    [
        0.1, 0.4, 0.8, 0.7
    ],
    [
        0.65, 0.5, 0.1
    ],
    [
        0.65, 0.4, 0.1, 0.8
    ],
    [
        0.4, 0.8, 0.3, 0.5, 0.4, 0.6
    ]
];
var alternativeValuesNormal = [];/*not for building and displaying table but for getting data of normalized alternatives*/
function tableNormal() {
    for (var i = 0; i < alternativeValues.length; i++) {
        var sum = alternativeValues[i].reduce(function (previousValue, currentValue, index, array) {
            return previousValue + currentValue;
        });
        alternativeValuesNormal[i] = [];
        for (var j = 0; j < alternativeValues[i].length; j++) {
            alternativeValuesNormal[i][j] = Number((alternativeValues[i][j] / sum).toFixed(5));
        }
    }
}
tableNormal();
var tableOfinterconections = [
    [//column
        [//block
            [0.7, 0.7, 0.0, 0.5, 0.8, 0.7, 0.7], //line
            [0.0, 0.8, 0.0, 0.0, 0.5, 0.0, 0.6],
            [-0.5, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0],
            [-0.8, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0],
            [0.0, 0.8, 0.0, 0.0, 0.8, 0.0, 0.5],
            [0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.5],
            [0.0, 0.7, 0.0, 0.0, 0.7, 0.0, 0.5],
            [0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.7, 0.0, 0.6, 0.8, 0.8, 0.0],
            [0.7, 0.6, 0.3, 0.7, 0.0, 0.7, 0.0],
            [0.0, 0.8, 0.0, 0.0, 0.8, 0.0, 0.0]
        ],
        [
            [0.0, 0.6, 0.0, 0.0, 0.7, 0.0, 0.0],
            [0.5, 0.6, 0.0, 0.8, 0.6, 0.0, 0.6],
            [0.0, 0.0, 0.6, 0.6, 0.5, 0.0, 0.6],
            [0.5, 0.7, 0.0, 0.0, 0.0, 0.5, 0.0],
            [0.8, 0.6, 0.0, 0.0, 0.0, 0.5, 0.0]
        ],
        [
            [0.8, 0.4, 0, 0, 0, 0, -0.9],
            [0, 0.8, 0, 0, 0, 0, -0.6],
            [0, 0, 0, 0, 0, 0.4, 0],
            [0, 0, 0, -0.9, 0, 0.5, 0]
        ],
        [
            [0.0, 0.8, 0.0, 0.6, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.3],
            [0.0, 0.6, 0.5, 0.7, 0.8, 0.0, 0.0],
            [0.0, 0.7, 0.7, 0.0, 0.7, 0.5, 0.0]
        ],
        [
            [0.0, 0.5, 0.0, 0.7, 0.7, 0.0, 0.8],
            [0.5, 0.7, 0.0, 0.0, 0.6, 0.5, -0.8],
            [0.0, 0.0, 0.4, 0.1, 0.0, 0.0, -0.6]
        ],
        [
            [0.0, 0.7, 0.0, 0.0, 0.0, 0.8, 0.0],
            [0.0, 0.5, -0.8, 0.0, 0.0, -0.6, -0.5],
            [0.0, 0.0, -0.9, -0.9, 0.0, -0.9, -0.5],
            [0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.5, 0.5, -0.9, 0.8, 0.0, -0.7],
            [0.6, 0.6, 0.4, 0.8, 0.4, 0.9, 0.6],
            [0.4, 0.0, -0.7, 0.6, 0.0, -0.9, -0.5],
            [0.7, 0.0, -0.9, -0.9, 0.0, -0.9, -0.9],
            [0.7, 0.5, -0.9, -0.9, 0.0, -0.9, -0.8],
            [0.0, 0.7, 0.6, 0.0, 0.0, 0.7, 0.2]//
        ]
    ],
    [
        [//second column tableOfinterconections[1] = matrixColumnNumber
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
            [0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 0.0],
            [0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.6, 0.0, 0.0, 0.7, 0.6, 0.6, 0.0]
        ],
        [
            [0.0, 0.5, 0.8, 0.9, 0.0, 0.0, 0.0, 0.0],
            [0.8, 0.0, -0.8, 0.9, 0.7, 0.8, 0.8, 0.0],
            [0.0, 0.0, -0.8, 0.9, 0.7, 0.8, 0.8, 0.0],
            [0.0, 0.6, 0.0, 0.9, 0.0, 0.0, 0.6, 0.0],
            [0.7, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.7, -0.9, 0.0, 0.0, 0.0, 0.5],
            [0.6, 0.0, 0.0, -0.9, 0.8, 0.0, 0.8, 0.0],
            [0.8, 0.7, 0.0, -0.9, 0.9, 0.6, 0.8, 0.0],
            [0.0, 0.0, 0.0, -0.9, 0.6, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.4, 0.0, 0.9, 0.6, 0.5, 0.8, 0.0],
            [0.8, 0.4, 0.0, -0.9, 0.7, 0.0, 0.6, 0.0],
            [0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.5]
        ],
        [
            [0.9, 0.0, 0.0, 0.0, 0.6, 0.8, 0.6, 0.0],
            [0.9, 0.0, -0.6, -0.5, 0.5, 0.0, 0.5, 0.0],
            [0.8, 0.0, -0.9, -0.9, -0.5, -0.8, -0.8, 0.0],
            [0.9, 0.0, 0.0, 0.0, 0.8, 0.0, 0.8, 0.0]
        ],
        [
            [0, 0, 0, 0, 0, 0.0, 0.0, 0.0],
            [0, 0, 0, 0, 0, 0.0, 0.0, 0.0],
            [0, 0, 0, 0, 0, 0.0, 0.0, 0.0],
            [0, 0, 0, 0, 0, 0.0, 0.0, 0.0],
            [0, 0, 0, 0, 0, 0.0, 0.0, 0.0],
            [0, 0, 0, 0, 0, 0.0, 0.0, 0.0]//
        ]
    ],
    [/*F3*/
        [/*F3xF2*/
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0]
        ],
        [
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F3xF4*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F3xF5*/
            [0.8, 0.0, 0.0],
            [0.6, 0.0, 0.5],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0]
        ],
        [/*F3xF6*/
            [0.5, 0.0, 0.8],
            [0.6, 0.0, 0.0],
            [0.0, 0.7, 0.5],
            [0.0, 0.0, 0.0]
        ],
        [/*F3xF7*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F3xF8*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F3xF9*/
            [0.0, 0.0, 0.7],
            [0.5, 0.7, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.4, 0.0],
            [0.0, 0.0, 0.0],
            [0.7, 0.6, 0.7]
        ]
    ],
    [
        [/*F4xF2*/
            [0.0, 0.8, 0.0, 0.0, 0.7],
            [0.5, 0.0, 0.0, 0.6, 0.8],
            [0.8, -0.8, -0.8, 0.0, 0.0],
            [0.9, 0.9, 0.9, 0.9, 0.0],
            [0.0, 0.7, 0.7, 0.0, 0.0],
            [0.0, 0.8, 0.8, 0.0, 0.0],
            [0.0, 0.8, 0.8, 0.6, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [/*F4xF3*/
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ],
        [
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ],
        [/*F4xF5*/
            [0.0, 0.0, 0.0, 0.0, 0.4],
            [0.0, 0.6, 0.6, 0.4, 0.4],
            [0.7, 0.7, 0.6, 0.4, 0.0],
            [0.8, 0.8, 0.8, 0.0, 0.0]
        ],
        [/*F4xF6*/
            [0.7, 0.0, 0.0, 0.7, 0.0],
            [0.0, 0.8, 0.7, 0.0, 0.0],
            [0.0, 0.8, 0.7, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.6, 0.6]
        ],
        [/*F4xF7*/
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ],
        [/*F4xF8*/
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ],
        [/*F4xF9*/
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0]//
        ]
    ],
    [
        [/*F5xF2*/
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [/*F5xF3*/
            [0.8, 0.6, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.5, 0.0, 0.0]
        ],
        [/*F5xF4*/
            [0.0, 0.0, 0.7, 0.8],
            [0.0, 0.6, 0.7, 0.8],
            [0.0, 0.6, 0.6, 0.8],
            [0.0, 0.4, 0.4, 0.0],
            [0.4, 0.4, 0.0, 0.0]
        ],
        [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [/*F5xF6*/
            [0.0, 0.5, 0.7, 0.0],
            [0.0, 0.4, 0.0, 0.5],
            [0.7, 0.8, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [/*F5xF7*/
            [0.0, 0.4, 0.7, 0.7],
            [0.6, 0.8, 0.8, 0.0],
            [0.0, 0.0, -0.6, -0.9]
        ],
        [/*F5xF8*/
            [0, 0, 0, -0.6],
            [-0.4, 0, 0, 0],
            [-0.6, 0, 0, 0],
            [0, 0, 0, -0.5]
        ],
        [/*F5xF9*/
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]//
        ]
    ],
    [
        [/*F6xF2 checked*/
            [0.0, 0.6, 0.8, 0.0],
            [0.0, 0.0, 0.7, 0.0],
            [0.7, 0.0, 0.0, 0.0],
            [-0.9, -0.9, -0.9, -0.9],
            [0.0, 0.8, 0.9, 0.6],
            [0.0, 0.0, 0.6, 0.0],
            [0.0, 0.8, 0.8, 0.0],
            [0.5, 0.0, 0.0, 0.0]
        ],
        [/*F6xF3 checked*/
            [0.5, 0.6, 0.0, 0.0],
            [0.0, 0.0, 0.7, 0.0],
            [0.8, 0.0, 0.5, 0.0]
        ],
        [/*F6xF4 checked*/
            [0.7, 0.0, 0.0, 0.0],
            [0.0, 0.8, 0.8, 0.0],
            [0.7, 0.7, 0.7, 0.0],
            [0.7, 0.0, 0.0, 0.6],
            [0.6, 0.0, 0.0, 0.0]
        ],
        [/*F6xF5 checked*/
            [0.0, 0.0, 0.7, 0.0],
            [0.5, 0.4, 0.8, 0.0],
            [0.7, 0.0, 0.0, 0.0],
            [0.0, 0.5, 0.0, 0.0]
        ],
        [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [/*F6xF7*/
            [0.0, 0.6, 0.6, 0.8],
            [0.0, 0.8, 0.8, 0.0],
            [0.6, 0.7, 0.0, 0.0]
        ],
        [/*F6xF8*/
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.8, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.6, 0.0, 0.0, 0.0]
        ],
        [/*F6xF9*/
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.5, 0.6],
            [0.2, 0.0, 0.6, 0.4],
            [0.2, 0.0, 0.7, 0.0],
            [0.0, 0.3, 0.7, 0.7],
            [0.0, 0.4, 0.5, 0.6]//
        ]
    ],
    [
        [/*F7xF2 checked*/
            [0.0, 0.8, 0.0],
            [0.4, 0.4, 0.0],
            [0.0, 0.0, 0.6],
            [0.9, -0.9, 0.0],
            [0.6, 0.7, 0.0],
            [0.5, 0.0, 0.0],
            [0.8, 0.6, 0.0],
            [0.0, 0.0, 0.5]
        ],
        [/*F7xF3*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F7xF4*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F7xF5*/
            [0.0, 0.7, 0.0],
            [0.4, 0.8, 0.0],
            [0.7, 0.8, -0.6],
            [0.7, 0, -0.9]
        ],
        [/*F7xF6*/
            [0.0, 0.0, 0.6],
            [0.6, 0.8, 0.7],
            [0.6, 0.8, 0.0],
            [0.8, 0.0, 0.0]
        ],
        [
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0]
        ],
        [/*F7xF8*/
            [0.0, 0.0, 0.0],
            [0.7, 0.0, 0.0],
            [0.5, 0.3, 0.5],
            [0.2, 0.0, 0.0],
            [0.6, 0.5, 0.0],
            [0.7, 0.5, 0.0]//
        ]
    ],
    [
        [
            [0.9, 0.9, 0.8, 0.9],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, -0.9, 0.0],
            [0.0, 0.0, -0.9, 0.0],
            [0.6, 0.5, 0.0, 0.8],
            [0.8, 0.0, 0.0, 0.0],
            [0.6, 0.5, 0.0, 0.8],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0, 0.6],
            [0.0, 0.8, 0.8, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [
            [0.0, 0.0, 0.7, 0.7],
            [0.8, 0.0, -0.9, 0.8],
            [0.0, 0.5, 0.0, 0.0],
            [0.0, 0.6, 0.0, 0.0],
            [0.0, 0.2, 0.3, 0.0],
            [0.8, 0.0, 0.0, 0.8]
        ]
    ]
];
/*matrixOfInterconnections - table or tableFormat from table.js*/

var tableOfinterconectionsChanged = [/*Only for calculations inside table1()*/
    [/*column*/
        [/*block*/
            [0.7, 0.7, 0.0, 0.5, 0.8, 0.7, 0.7], /*line*/
            [0.0, 0.8, 0.0, 0.0, 0.5, -0.6, 0.6],
            [-0.5, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0],
            [-0.8, 0.0, 0.0, 0.6, -0.8, -0.8, 0.0],
            [0.0, 0.8, 0.0, 0.0, 0.8, -0.5, 0.5],
            [-0.9, 0.0, 0.6, 0.0, 0.0, -0.8, 0.5],
            [-0.8, 0.7, 0.0, 0.0, 0.7, 0.0, 0.5],
            [0.0, 0.5, 0.6, 0.0, 0.0, -0.8, 0.0]
        ],
        [
            [0.0, 0.7, 0.0, 0.6, 0.8, 0.8, 0.0],
            [0.7, 0.8, 0.3, 0.7, 0.0, 0.7, 0.0],
            [0.0, 0.8, 0.0, 0.0, 0.8, 0.0, 0.0]
        ],
        [
            [0.0, 0.6, 0.0, 0.0, 0.7, 0.0, 0.0],
            [0.5, 0.6, 0.0, 0.8, 0.6, 0.0, 0.6],
            [0.0, 0.0, 0.6, 0.6, 0.5, 0.0, 0.6],
            [0.5, 0.7, 0.0, 0.0, 0.0, 0.5, 0.0],
            [0.8, 0.6, 0.0, 0.0, 0.0, 0.5, 0.0]
        ],
        [
            [0.8, 0.4, 0.0, 0.0, 0.0, 0.0, -0.9],
            [0.0, 0.8, 0.0, 0.0, 0.0, 0.4, -0.6],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0],
            [0.0, 0.0, 0.0, -0.9, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.5, 0.0, 0.6, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.3],
            [0.0, 0.6, 0.5, 0.7, 0.8, 0.0, 0.0],
            [0.0, 0.7, 0.7, 0.0, 0.7, 0.5, 0.0]
        ],
        [
            [0.0, 0.8, 0.0, 0.7, 0.7, 0.0, 0.8],
            [0.5, 0.2, 0.0, 0.0, 0.6, 0.5, -0.8],
            [0.0, 0.0, 0.4, 0.1, 0.0, 0.0, -0.6]
        ],
        [
            [0.0, 0.7, 0.0, 0.0, 0.0, 0.8, 0.0],
            [0.0, 0.5, -0.8, 0.0, 0.0, -0.6, -0.5],
            [0.0, 0.0, -0.9, -0.9, 0.0, -0.9, -0.5],
            [0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.5, 0.5, -0.9, 0.8, 0.0, -0.7],
            [0.6, 0.6, 0.4, 0.8, 0.4, 0.9, 0.6],
            [0.4, 0.0, -0.7, 0.6, 0.0, -0.9, -0.5],
            [0.7, 0.0, -0.9, -0.9, 0.0, 0.0, -0.9],
            [0.7, 0.5, -0.9, -0.9, 0.0, -0.9, -0.8],
            [0.0, 0.7, 0.6, 0.0, 0.0, 0.7, 0.2]//
        ]
    ],
    [
        [/*second column tableOfinterconections[1] = matrixColumnNumber*/
            [0.7, 0.0, -0.5, -0.8, 0.0, -0.9, -0.8, 0.0], /*F2xF1*/
            [0.7, 0.8, 0.0, 0.0, 0.8, 0.0, 0.7, 0.5],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 0.0, 0.6],
            [0.5, 0.0, 0.6, 0.6, 0.0, 0.0, 0.0, 0.0],
            [0.8, 0.5, 0.0, -0.8, 0.8, 0.0, 0.7, 0.0],
            [0.7, -0.6, 0.0, -0.8, -0.5, -0.8, 0.0, -0.8],
            [0.7, 0.6, 0.0, 0.0, 0.5, 0.5, 0.5, 0.0]
        ],
        [/*F2xF3*/
            [0.8, 0.0, 0.0, 0.0, 0.0, 0.6, 0.0, 0.0],
            [0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.7, 0.6, 0.0, 0.0, 0.7, 0.6, 0.6, 0.0]
        ],
        [/*F2xF4*/
            [0.0, 0.5, 0.8, 0.9, 0.0, 0.0, 0.0, 0.0],
            [0.8, 0.0, -0.8, 0.9, 0.7, 0.8, 0.8, 0.0],
            [0.5, 0.0, -0.8, 0.9, 0.7, 0.8, 0.8, 0.0],
            [0.5, 0.6, 0.0, 0.9, 0.0, 0.0, 0.6, 0.0],
            [0.7, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [/*F2xF5*/
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [/*F2xF6*/
            [0.0, 0.0, 0.7, -0.9, 0.0, 0.0, 0.0, 0.5],
            [0.6, 0.0, 0.0, -0.9, 0.4, 0.0, 0.4, 0.0],
            [0.8, 0.7, 0.0, -0.9, 0.9, 0.6, 0.8, 0.0],
            [0.5, 0.0, 0.7, -0.9, 0.6, 0.0, 0.0, 0.0]
        ],
        [/*F2xF7*/
            [0.6, 0.4, 0.0, 0.9, 0.6, 0.5, 0.8, 0.0],
            [0.8, 0.4, -0.8, -0.9, 0.7, 0.0, 0.6, -0.9],
            [0.0, 0.0, 0.6, -0.9, 0.0, 0.0, 0.0, 0.5]
        ],
        [/*F2xF8*/
            [0.9, 0.0, 0.0, 0.0, 0.6, 0.8, 0.6, 0.0],
            [0.9, 0.0, -0.5, -0.6, 0.5, 0.0, 0.5, 0.0],
            [0.8, 0.0, -0.9, -0.9, -0.5, -0.8, -0.8, 0.0],
            [0.9, 0.0, 0.0, 0.0, 0.8, 0.0, 0.8, 0.0]
        ],
        [/*F2xF9*/
            [0, 0, 0, 0, 0, 0.0, 0.0, 0.0],
            [0, 0, 0, 0, 0, 0.0, 0.0, 0.0],
            [0.8, -0.8, 0, 0, -0.8, -0.9, -0.9, -0.9],
            [0.7, -0.8, -0.8, -0.9, -0.7, -0.8, -0.8, -0.9],
            [0.7, -0.8, -0.8, -0.9, 0.7, -0.9, 0.0, 0.0],
            [0, 0, -0.5, -0.9, 0, 0.0, 0.0, 0.0]//
        ]
    ],
    [
        [/*instead of F3xF3 block used F3xF1 block; the same to F1xF3 but tranponed*/
            [0.0, 0.7, 0.0],
            [0.7, 0.6, 0.8],
            [0.0, 0.3, 0.0],
            [0.6, 0.7, 0.0],
            [0.8, 0.0, 0.8],
            [0.8, 0.0, 0.0],
            [0.0, 0.0, 0.0]
        ],
        [/*F3xF2*/
            [0.8, 0.5, 0.7],
            [0.0, 0.5, 0.6],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.7],
            [0.6, 0.0, 0.6],
            [0.0, 0.0, 0.6],
            [0.0, 0.0, 0.0]
        ],
        [/*F3xF4*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F3xF5*/
            [0.8, 0.0, 0.0],
            [0.6, 0.0, 0.5],
            [0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0]
        ],
        [/*F3xF6*/
            [0.0, 0.0, 0.0],
            [0.6, 0.0, 0.0],
            [0.0, 0.7, 0.5],
            [0.5, 0.0, 0.8]
        ],
        [/*F3xF7*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F3xF8*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F3xF9*/
            [0.0, 0.0, 0.7],
            [0.5, 0.7, 0.7],
            [0.0, 0.0, 0.0],
            [0.0, 0.4, 0.0],
            [0.0, 0.0, 0.0],
            [0.7, 0.6, 0.0]
        ]
    ],
    [/*!!!!!!!!*/
        [/*changed to get F4xF1 connection*/
            [0.0, 0.5, 0.0, 0.5, 0.8],
            [0.6, 0.6, 0.0, 0.7, 0.6],
            [0.0, 0.0, 0.6, 0.0, 0.0],
            [0.0, 0.8, 0.6, 0.0, 0.0],
            [0.7, 0.6, 0.5, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.5, 0.5],
            [0.0, 0.6, 0.6, 0.0, 0.0]
        ],
        [/*F4xF2*/
            [0.0, 0.8, 0.5, 0.5, 0.7],
            [0.5, 0.0, 0.0, 0.6, 0.8],
            [0.8, -0.8, -0.8, 0.0, 0.0],
            [0.9, 0.9, 0.9, 0.9, 0.0],
            [0.0, 0.7, 0.7, 0.0, 0.0],
            [0.0, 0.8, 0.8, 0.0, 0.0],
            [0.0, 0.8, 0.8, 0.6, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [/*F4xF3*/
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ],
        [/*F4xF5*/
            [0.0, 0.0, 0.0, 0.0, 0.4],
            [0.0, 0.6, 0.5, 0.4, 0.4],
            [0.7, 0.7, 0.6, 0.4, 0.0],
            [0.8, 0.8, 0.8, 0.0, 0.0]
        ],
        [/*F4xF6*/
            [0.7, 0.0, 0.0, 0.5, 0.0],
            [0.0, 0.6, 0.4, 0.0, 0.0],
            [0.0, 0.8, 0.7, 0.0, 0.0],
            [0.0, 0.8, 0.0, 0.6, 0.6]
        ],
        [/*F4xF7*/
            [0, 0.8, 0.6, 0.0, 0.0],
            [0, 0.0, 0.0, -0.9, -0.9],
            [0, 0, 0, -0.5, -0.5]
        ],
        [/*F4xF8*/
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ],
        [/*F4xF9*/
            [0, 0, -0.7, 0, 0, 0, 0],
            [0, 0.8, 0, 0, 0, 0, 0],
            [-0.9, 0.0, 0.0, 0, 0, 0, 0],
            [0, 0.9, 0.7, 0, 0, 0, 0],
            [0, 0.0, 0, 0, 0, 0, 0],
            [0, 0.8, -0.8, 0, 0, 0, 0]//
        ]
    ],
    [
        [/*F5xF1*/
            [0.8, 0, 0, 0],
            [0.4, 0.8, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, -0.9],
            [0, 0, 0, 0],
            [0, 0.4, 0.5, 0],
            [-0.9, -0.6, 0, 0]
        ],
        [/*F5xF2*/
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [/*F5xF3*/
            [0.8, 0.6, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.5, 0.0, 0.0]
        ],
        [/*F5xF4*/
            [0.0, 0.0, 0.7, 0.8],
            [0.0, 0.6, 0.7, 0.8],
            [0.0, 0.5, 0.6, 0.8],
            [0.0, 0.4, 0.4, 0.0],
            [0.4, 0.4, 0.0, 0.0]
        ],
        [/*F5xF6*/
            [0.0, 0.2, 0.4, 0.0],
            [0.0, 0.4, 0.0, 0.5],
            [0.7, 0.8, 0.0, 0.0],
            [0.0, 0.6, 0.7, 0.0]
        ],
        [/*F5xF7*/
            [0.0, 0.4, 0.7, 0.7],
            [0.4, 0.5, 0.6, 0.0],
            [0.0, 0.0, -0.6, -0.9]
        ],
        [/*F5xF8*/
            [0, 0, 0, -0.6],
            [-0.4, 0, 0, 0],
            [-0.6, 0, 0, 0],
            [0, 0, 0, -0.5]
        ],
        [/*F5xF9*/
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, -0.7],
            [0, 0, 0, 0],
            [0, 0, 0, -0.7],
            [0, 0, -0.7, -0.7]//
        ]
    ],
    [
        [/*F6xF1 checked*/
            [0.0, 0.0, 0.0, 0.0],
            [0.5, 0.0, 0.6, 0.7],
            [0.0, 0.0, 0.5, 0.7],
            [0.6, 0.0, 0.7, 0.0],
            [0.0, 0.5, 0.8, 0.7],
            [0.0, 0.0, 0.0, 0.5],
            [0.0, 0.3, 0.0, 0.0]
        ],
        [/*F6xF2 checked*/
            [0.0, 0.6, 0.8, 0.5],
            [0.0, 0.0, 0.7, 0.0],
            [0.7, 0.0, 0.0, 0.7],
            [-0.9, -0.9, -0.9, -0.9],
            [0.0, 0.4, 0.9, 0.6],
            [0.0, 0.0, 0.6, 0.0],
            [0.0, 0.4, 0.8, 0.0],
            [0.5, 0.0, 0.0, 0.0]
        ],
        [/*F6xF3 checked*/
            [0.0, 0.6, 0.0, 0.5],
            [0.0, 0.0, 0.7, 0.0],
            [0.0, 0.0, 0.5, 0.8]
        ],
        [/*F6xF4 checked*/
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.6, 0.8, 0.8],
            [0.0, 0.4, 0.7, 0.0],
            [0.5, 0.0, 0.0, 0.6],
            [0.0, 0.0, 0.0, 0.6]
        ],
        [/*F6xF5 checked*/
            [0.0, 0.2, 0.4, 0.0],
            [0.0, 0.4, 0.8, 0.5],
            [0.7, 0.8, 0.0, 0.0],
            [0.0, 0.6, 0.7, 0.0]
        ],
        [/*F6xF7*/
            [0.0, 0.0, 0.6, 0.8],
            [-0.9, 0.5, 0.8, 0.0],
            [0.0, 0.2, 0.0, 0.0]
        ],
        [/*F6xF8*/
            [-0.8, -0.8, 0.5, 0.0],
            [0.0, -0.6, 0.6, 0.5],
            [0.5, 0.6, 0.6, 0.6],
            [-0.8, 0.0, 0.0, 0.0]
        ],
        [/*F6xF9*/
            [0.0, -0.7, 0.0, 0.0],
            [0.0, 0.0, 0.5, 0.6],
            [0.2, 0.0, 0.6, 0.4],
            [0.2, 0.0, 0.7, 0.0],
            [0.0, -0.5, 0.7, 0.7],
            [0.0, 0.0, 0.5, 0.6]//
        ]
    ],
    [/*F7*/
        [/*F7xF1*/
            [0.0, 0.5, 0.0],
            [0.8, 0.2, 0.0],
            [0.0, 0.0, 0.4],
            [0.7, 0.0, 0.1],
            [0.7, 0.6, 0.0],
            [0.0, 0.5, 0.0],
            [0.8, -0.8, -0.6]
        ],
        [/*F7xF2 checked*/
            [0.6, 0.8, 0.0],
            [0.4, 0.4, 0.0],
            [0.0, -0.8, 0.6],
            [0.9, -0.9, -0.9],
            [0.6, 0.7, 0.0],
            [0.5, 0.0, 0.0],
            [0.8, 0.6, 0.0],
            [0.0, -0.9, 0.5]
        ],
        [/*F7xF3*/
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ],
        [/*F7xF4*/
            [0.0, 0.0, 0.0],
            [0.8, 0.0, 0.0],
            [0.6, 0.0, 0.0],
            [0.0, -0.9, -0.5],
            [0.0, -0.9, -0.5]
        ],
        [/*F7xF5*/
            [0.0, 0.4, 0.0],
            [0.4, 0.5, 0.0],
            [0.7, 0.6, -0.6],
            [0.7, 0.0, -0.9]
        ],
        [/*F7xF6*/
            [0.0, -0.9, 0.0],
            [0.0, 0.5, 0.2],
            [0.6, 0.8, 0.0],
            [0.8, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0],
            [0.6, 0.0, 0.0],
            [0.8, 0.0, 0.0],
            [0.0, 0.0, 0.0]
        ],
        [/*F7xF8*/
            [0.0, 0.0, 0.0],
            [0.7, 0.0, 0.0],
            [0.5, 0.3, 0.5],
            [0.5, 0.0, 0.0],
            [0.6, 0.5, 0.0],
            [0.7, 0.5, 0.0]//
        ]
    ],
    [
        [/*F8xF1*/
            [0.0, 0.0, 0.0, 0.0],
            [0.7, 0.5, 0.0, 0.8],
            [0.0, -0.8, -0.9, 0.0],
            [0.0, 0.0, -0.9, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.8, -0.6, -0.9, 0.0],
            [0.0, -0.5, -0.5, 0.0]
        ],
        [
            [0.9, 0.9, 0.8, 0.9],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, -0.5, -0.9, 0.0],
            [0.0, -0.6, -0.9, 0.0],
            [0.6, 0.5, -0.5, 0.8],
            [0.8, 0.0, -0.8, 0.0],
            [0.6, 0.5, -0.8, 0.8],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, -0.4, -0.6, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [-0.6, 0.0, 0.0, -0.5]
        ],
        [
            [-0.8, 0.0, 0.5, -0.8],
            [-0.8, -0.6, 0.6, 0.0],
            [0.5, 0.6, 0.6, 0.0],
            [0.0, 0.5, 0.6, 0.0]
        ],
        [
            [0.0, 0.6, 0.8, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, 0.7, 0.7],
            [0.8, -0.6, -0.9, 0.8],
            [0.0, 0.5, 0.0, 0.0],
            [0.0, 0.6, 0.0, 0.0],
            [0.0, 0.2, 0.3, 0.0],
            [0.5, 0.0, 0.0, 0.5]
        ]
    ],
    [//all the alternatives are changed
        [/*F9xF1*/
            [0.0, 0.6, 0.4, 0.7, 0.7, 0.0],
            [0.5, 0.6, 0.0, 0.0, 0.5, 0.7],
            [0.5, 0.4, -0.7, -0.9, -0.9, 0.6],
            [-0.9, 0.8, 0.6, -0.9, -0.9, 0.0],
            [0.8, 0.4, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.9, -0.9, 0.0, -0.9, 0.7],
            [-0.7, 0.6, -0.5, -0.9, -0.8, 0.2]
        ],
        [
            [0.0, 0.0, 0.8, 0.7, 0.7, 0.0],
            [0.0, 0.0, -0.8, -0.8, -0.8, 0.0],
            [0.0, 0.0, 0.0, -0.8, -0.8, -0.5],
            [0.0, 0.0, 0.0, -0.8, -0.9, -0.9],
            [0.0, 0.0, -0.8, -0.7, 0.7, 0.0],
            [0.0, 0.0, -0.9, -0.8, -0.9, 0.0],
            [0.0, 0.0, -0.9, -0.8, 0.0, 0.0],
            [0.0, 0.0, -0.9, -0.9, 0.0, 0.0]
        ],
        [/*F3*/
            [0.0, 0.5, 0.0, 0.0, 0.0, 0.7],
            [0.0, 0.7, 0.0, 0.4, 0.0, 0.6],
            [0.7, 0.7, 0.0, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.0, -0.9, 0.0, 0.0, 0.0],
            [0.0, 0.8, 0.0, 0.9, 0.0, 0.8],
            [-0.7, 0.0, 0.0, 0.7, 0.0, -0.8],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        ],
        [/*F5*/
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, -0.7],
            [0.0, 0.0, -0.7, 0.0, -0.7, -0.7]
        ],
        [
            [0.0, 0.0, 0.2, 0.2, 0.0, 0.0],
            [-0.7, 0.0, 0.0, 0.0, -0.5, 0.0],
            [0.0, 0.5, 0.6, 0.7, 0.7, 0.5],
            [0.0, 0.6, 0.4, 0.0, 0.7, 0.6]
        ],
        [
            [0.0, 0.7, 0.5, 0.5, 0.6, 0.7],
            [0.0, 0.0, 0.3, 0.0, 0.5, 0.5],
            [0.0, 0.0, 0.5, 0.0, 0.0, 0.0]
        ],
        [
            [0.0, 0.8, 0.0, 0.0, 0.0, 0.5],
            [0.0, -0.6, 0.5, 0.6, 0.2, 0.0],
            [0.7, -0.9, 0.0, 0.0, 0.3, 0.0],
            [0.7, 0.8, 0.0, 0.0, 0.0, 0.5]
        ]
    ]
];

var event1 = [
    [
        1.414, 0.5, 0.707, 1, 0.25, 1, 1//
    ],
    [
        1, 1, 1, 1, 1, 1, 1, 1
    ],
    [
        1, 1, 0.707
    ],
    [
        1, 0.5, 0.5, 0.707, 0.707
    ],
    [
        0.354, 0.354, 0.5, 0.5
    ],
    [
        1, 0.707, 1, 1
    ],
    [
        0.354, 0.5, 1
    ],
    [
        1, 0.5, 0.354, 1
    ],
    [
        1, 0.707, 0.5, 1.414, 1.414, 0.707
    ]
];
var event2 = [
    [
        1.414, 0.5, 0.354, 1, 0.25, 1, 1//
    ],
    [
        0.25, 1, 1, 1, 0.354, 1, 2, 1
    ],
    [
        1, 1, 0.707
    ],
    [
        1, 0.5, 0.5, 0.707, 0.707
    ],
    [
        0.354, 0.354, 1, 1
    ],
    [
        1, 0.707, 1, 1
    ],
    [
        0.354, 1.414, 1
    ],
    [
        1, 0.5, 0.354, 1
    ],
    [
        1, 0.707, 0.5, 1.414, 1.414, 0.707
    ]
];
var trend1 = [
    [
        0.8708, 0.9, 1, 0.85, 0.9, 1, 1
    ],
    [
        0.9, 1, 1, 1, 0.8708, 0.85, 0.85, 1
    ],
    [
        1, 1, 1
    ],
    [
        1, 0.9414, 0.9414, 1, 1
    ],
    [
        1, 0.9414, 0.9, 1
    ],
    [
        1, 0.9, 1, 0.9414
    ],
    [
        1, 0.9, 0.8708
    ],
    [
        1, 1, 1, 1
    ],
    [
        1, 0.9, 1, 1, 0.9414, 0.9
    ]
];
var trend2 = [
    [
        0.677, 0.75, 1, 0.625, 0.75, 1, 1
    ],
    [
        0.75, 1, 1, 1, 0.677, 0.625, 0.625, 1
    ],
    [
        1, 1, 1
    ],
    [
        1, 0.8535, 0.8535, 1, 1
    ],
    [
        1, 1, 0.75, 1
    ],
    [
        1, 0.75, 1, 0.8535
    ],
    [
        1, 0.75, 0.677
    ],
    [
        1, 1, 1, 1
    ],
    [
        1, 0.75, 1, 1, 0.8535, 0.75
    ]
];
/*Consideration ot events*/
var alternativesWithEvent;/* this variable is for saving morfological table's data with event(s) influense*/
function useEvent(e1, e2) {
    alternativesWithEvent = [];
    if (arguments.length === 2) {
        for (var i = 0; i < alternativeValues.length; i++) {
            alternativesWithEvent[i] = [];
            for (var j = 0; j < alternativeValues[i].length; j++) {
                alternativesWithEvent[i][j] = alternativeValues[i][j] * e1[i][j] * e2[i][j];
            }
        }
    } else if (arguments.length === 1) {
        for (var i = 0; i < alternativeValues.length; i++) {
            alternativesWithEvent[i] = [];
            for (var j = 0; j < alternativeValues[i].length; j++) {
                alternativesWithEvent[i][j] = alternativeValues[i][j] * e1[i][j];
            }
        }
    }
}
useEvent(event1);
/*normalize table for its using in the first stage of MMAM*/
var alternativesWithEventsNormalized;
function normalize(table) {
    alternativesWithEventsNormalized = [];
    for (var i = 0; i < table.length; i++) {
        var sum = table[i].reduce(function (previousValue, currentValue, index, array) {
            return previousValue + currentValue;
        });
        alternativesWithEventsNormalized[i] = [];
        for (var j = 0; j < table[i].length; j++) {
            alternativesWithEventsNormalized[i][j] = Number((table[i][j] / sum).toFixed(5));
        }
    }
}
normalize(alternativesWithEvent);


var configurationTable1 = document.getElementById("configuration1");
var alternativesResult = [];
var resultPvalues = [];

/*Table of configurations to the first parameter*/
function table1(matrixColumnNumber, alternativesNormalColumn) {/*matrixColumnNumber = column of the matrix of interconnections; alternativesNormalColumn = alternativeValuesNormal[number] to choose value of alt. if there no connections in matrix of interconnections*/
    var c = [];
    for (var v = 0; v < alternativesNormalColumn.length; v++) {
        c[v] = [];
    }
    /*array = [7][7], 7 - first dimention is 7 parameters, 7 - second dimention is 7 alternatives in the first parameter/column of matrix of interconections*/
    var cs = [];
    var p = [];
    resultPvalues = [];
    for (v = 0; v < alternativesNormalColumn.length; v++) {
        resultPvalues[v] = 0;
    }
    /*Theese loops are for moving through the column of matrix of interconnections(yellow, orange, green colored elements in diploma.ods*/
    for (var j = 0; j < matrixColumnNumber[0].length; j++) {/*2.1,...*/
        for (var jj = 0; jj < alternativesNormalColumn.length; jj++) {
            /*alternativesNormalColumn.length - width of the n-th column of matrix of interconections*/
            if (matrixColumnNumber[0][j][jj] !== 0) {
                c[jj][0] = 2 / (1 - matrixColumnNumber[0][j][jj]) - 1;
            } else {
                c[jj][0] = 0;
            }
        }
        for (var k = 0; k < matrixColumnNumber[1].length; k++) {/*2.1: 3.1, 3.2,...*/
            for (var kk = 0; kk < alternativesNormalColumn.length; kk++) {
                if (matrixColumnNumber[1][k][kk] !== 0) {
                    c[kk][1] = 2 / (1 - matrixColumnNumber[1][k][kk]) - 1;
                } else {
                    c[kk][1] = 0;
                }
            }
            for (var l = 0; l < matrixColumnNumber[2].length; l++) {/*2.1, 3.1: 4.1, 4.2,...*/
                for (var ll = 0; ll < alternativesNormalColumn.length; ll++) {
                    if (matrixColumnNumber[2][l][ll] !== 0) {
                        c[ll][2] = 2 / (1 - matrixColumnNumber[2][l][ll]) - 1;
                    } else {
                        c[ll][2] = 0;
                    }
                }
                for (var n = 0; n < matrixColumnNumber[3].length; n++) {/*2.1, 3.1, 4.1: 5.1, 5.2,...*/
                    for (var nn = 0; nn < alternativesNormalColumn.length; nn++) {
                        if (matrixColumnNumber[3][n][nn] !== 0) {
                            c[nn][3] = 2 / (1 - matrixColumnNumber[3][n][nn]) - 1;
                        } else {
                            c[nn][3] = 0;
                        }
                    }
                    for (var m = 0; m < matrixColumnNumber[4].length; m++) {/*2.1, 3.1, 4.1, 5.1: 6.1, 6.2,...*/
                        for (var mm = 0; mm < alternativesNormalColumn.length; mm++) {
                            if (matrixColumnNumber[4][m][mm] !== 0) {
                                c[mm][4] = 2 / (1 - matrixColumnNumber[4][m][mm]) - 1;
                            } else {
                                c[mm][4] = 0;
                            }
                        }
                        for (var f = 0; f < matrixColumnNumber[5].length; f++) {/*2.1, 3.1, 4.1, 5.1, 6.1: 7.1, 7.2,...*/
                            for (var ff = 0; ff < alternativesNormalColumn.length; ff++) {
                                if (matrixColumnNumber[5][f][ff] !== 0) {
                                    c[ff][5] = 2 / (1 - matrixColumnNumber[5][f][ff]) - 1;
                                } else {
                                    c[ff][5] = 0;
                                }
                            }
                            for (var g = 0; g < matrixColumnNumber[6].length; g++) {/*2.1, 3.1, 4.1, 5.1, 6.1, 7.1: alternatives of F1 parameter*/
                                for (var gg = 0; gg < alternativesNormalColumn.length; gg++) {
                                    if (matrixColumnNumber[6][g][gg] !== 0) {
                                        c[gg][6] = 2 / (1 - matrixColumnNumber[6][g][gg]) - 1;
                                    } else {
                                        c[gg][6] = 0;
                                    }
                                }
                                for (var t = 0; t < matrixColumnNumber[7].length; t++) {
                                    for (var tt = 0; tt < alternativesNormalColumn.length; tt++) {
                                        if (matrixColumnNumber[7][t][tt] !== 0) {
                                            c[tt][7] = 2 / (1 - matrixColumnNumber[7][t][tt]) - 1;
                                        } else {
                                            c[tt][7] = 0;
                                        }
                                    }
                                    //need to be cleaned after every full loop; 
                                    cs = [];
                                    for (var i = 0; i < alternativesNormalColumn.length; i++) {/*parameterNumber will be passed into function as alternativeNames[number] / alternativeValues[number]; in first case number will be 0, so will be chosen the first parameter with 7 alternatives*/
                                        cs.push(1);
                                    }
                                    //if (j === 0)
                                    //console.log("c is " + c);
                                    var sum = 0;
                                    p = [];
                                    for (var r = 0; r < c.length; r++) {
                                        for (var q = 0; q < c[r].length; q++) {
                                            if (c[r][q] !== 0) {
                                                cs[r] *= c[r][q];
                                            }
                                        }
                                        /*check once again*/
                                        var r_p = 0;
                                        var eta_p = 0;
                                        var t_c = 0;
                                        cs[r] = 1 - 2 / (cs[r] + 1);
                                        if (cs[r] !== 0) {
                                            //console.log("cs: " + cs[r]);
                                            r_p = Math.cos((Math.acos(1 - 2 * alternativesNormalColumn[r]) + Math.PI) / 3) + 0.5;/*p from alternativeValuesNormal*/
                                            //console.log("r_p: " + r_p);
                                            if (alternativesNormalColumn[r] >= 0.5) {
                                                eta_p = -(Math.log2(r_p));
                                            } else if (alternativesNormalColumn[r] < 0.5) {
                                                eta_p = -(Math.pow(Math.log2(1 - r_p), (-1)));
                                            }
                                            //console.log("eta_p: " + eta_p);
                                            if (eta_p >= 1) {
                                                t_c = 1 - 2 * Math.pow(((1 - cs[r]) / 2), eta_p);
                                            } else {
                                                t_c = 2 * Math.pow(((1 + cs[r]) / 2), (1 / eta_p)) - 1;
                                            }
                                            //console.log("t_c: " + t_c);
                                            p[r] = 3 * Math.pow(((t_c + 1) / 2), 2) - 2 * Math.pow(((t_c + 1) / 2), 3);
                                        } else {
                                            p[r] = alternativesNormalColumn[r]; /*parameterNumber = alterternativeValues[number], number = 0...7*/
                                            //console.log("no connection in table");
                                        }
                                        sum += p[r];
                                    }
                                    //document.write("<br/>");
                                    /*This is added experimentaly*/
                                    if (alternativesNormalColumn === alternativeValuesNormal[0] || alternativesNormalColumn === alternativesWithEventsNormalized[0]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[1][j] * alternativeValuesNormal[2][k] * alternativeValuesNormal[3][l] * alternativeValuesNormal[4][n] * alternativeValuesNormal[5][m] * alternativeValuesNormal[6][f] * alternativeValuesNormal[7][g] * alternativeValuesNormal[8][t];
                                        }
                                    /*}else if (alternativesNormalColumn === alternativesWithEventsNormalized[0]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativesWithEventsNormalized[1][j] * alternativesWithEventsNormalized[2][k] * alternativesWithEventsNormalized[3][l] * alternativesWithEventsNormalized[4][n] * alternativesWithEventsNormalized[5][m] * alternativesWithEventsNormalized[6][f] * alternativesWithEventsNormalized[7][g] * alternativesWithEventsNormalized[8][t];
                                        }
                                    */}else if (alternativesNormalColumn === alternativeValuesNormal[1] || alternativesNormalColumn === alternativesWithEventsNormalized[1]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[0][j] * alternativeValuesNormal[2][k] * alternativeValuesNormal[3][l] * alternativeValuesNormal[4][n] * alternativeValuesNormal[5][m] * alternativeValuesNormal[6][f] * alternativeValuesNormal[7][g] * alternativeValuesNormal[8][t];
                                        }
                                    } else if (alternativesNormalColumn === alternativeValuesNormal[2] || alternativesNormalColumn === alternativesWithEventsNormalized[2]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[0][j] * alternativeValuesNormal[1][k] * alternativeValuesNormal[3][l] * alternativeValuesNormal[4][n] * alternativeValuesNormal[5][m] * alternativeValuesNormal[6][f] * alternativeValuesNormal[7][g] * alternativeValuesNormal[8][t];
                                        }
                                    } else if (alternativesNormalColumn === alternativeValuesNormal[3] || alternativesNormalColumn === alternativesWithEventsNormalized[3]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[0][j] * alternativeValuesNormal[1][k] * alternativeValuesNormal[2][l] * alternativeValuesNormal[4][n] * alternativeValuesNormal[5][m] * alternativeValuesNormal[6][f] * alternativeValuesNormal[7][g] * alternativeValuesNormal[8][t];
                                        }
                                    } else if (alternativesNormalColumn === alternativeValuesNormal[4] || alternativesNormalColumn === alternativesWithEventsNormalized[4]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[0][j] * alternativeValuesNormal[1][k] * alternativeValuesNormal[2][l] * alternativeValuesNormal[3][n] * alternativeValuesNormal[5][m] * alternativeValuesNormal[6][f] * alternativeValuesNormal[7][g] * alternativeValuesNormal[8][t];
                                        }
                                    } else if (alternativesNormalColumn === alternativeValuesNormal[5] || alternativesNormalColumn === alternativesWithEventsNormalized[5]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[0][j] * alternativeValuesNormal[1][k] * alternativeValuesNormal[2][l] * alternativeValuesNormal[3][n] * alternativeValuesNormal[4][m] * alternativeValuesNormal[6][f] * alternativeValuesNormal[7][g] * alternativeValuesNormal[8][t];
                                        }
                                    } else if (alternativesNormalColumn === alternativeValuesNormal[6] || alternativesNormalColumn === alternativesWithEventsNormalized[6]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[0][j] * alternativeValuesNormal[1][k] * alternativeValuesNormal[2][l] * alternativeValuesNormal[3][n] * alternativeValuesNormal[4][m] * alternativeValuesNormal[5][f] * alternativeValuesNormal[7][g] * alternativeValuesNormal[8][t];
                                        }
                                    } else if (alternativesNormalColumn === alternativeValuesNormal[7] || alternativesNormalColumn === alternativesWithEventsNormalized[7]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[0][j] * alternativeValuesNormal[1][k] * alternativeValuesNormal[2][l] * alternativeValuesNormal[3][n] * alternativeValuesNormal[4][m] * alternativeValuesNormal[5][f] * alternativeValuesNormal[6][g] * alternativeValuesNormal[8][t];
                                        }
                                    } else if (alternativesNormalColumn === alternativeValuesNormal[8] || alternativesNormalColumn === alternativesWithEventsNormalized[8]) {
                                        for (r = 0; r < c.length; r++) {
                                            p[r] = p[r] / sum;
                                            resultPvalues[r] = resultPvalues[r] + p[r] * alternativeValuesNormal[0][j] * alternativeValuesNormal[1][k] * alternativeValuesNormal[2][l] * alternativeValuesNormal[3][n] * alternativeValuesNormal[4][m] * alternativeValuesNormal[5][f] * alternativeValuesNormal[6][g] * alternativeValuesNormal[7][t];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

var resultValues = [];/*Array for the definitive ratings*/

function defRating() {/*standart first stage*/
    for (var k = 0; k < alternativeValues.length; k++) {
        resultValues[k] = [];
    }
    for (var i = 0; i < parameterNames.length; i++) {
        table1(tableOfinterconectionsChanged[i], alternativeValuesNormal[i]);
        for (var j = 0; j < resultPvalues.length; j++) {
            if (j === (resultPvalues.length - 1)) {
                resultValues[i].push(1 + resultPvalues[j] - resultPvalues.reduce(function (previousValue, currentValue, array, index) {
                    return previousValue + currentValue;
                }));
            } else {
                resultValues[i].push(resultPvalues[j]);
            }
        }
    }
}
defRating();

var width = Number(((document.documentElement.clientWidth - 70) / parameterNames.length).toFixed(0));

function showDefRating() {/*for displaying definitive ratings as the final part of the first stage analysis*/
    var defTable = document.getElementById("defTable");
    for (var i = 0; i < alternativeNames.length; i++) {
        var column = document.createElement("div");
        column.className = "column";
        column.style.width = width + "px";
        defTable.appendChild(column);

        var header = document.createElement("div");
        header.className = "header";
        //header.style.backgroundColor = "lightgrey";
        //header.style.borderColor = "#000";
        header.innerHTML = parameterNames[i];
        column.appendChild(header);

        for (var j = 0; j < alternativeNames[i].length; j++) {
            var line = document.createElement("div");
            line.className = "line";
            line.style.lineHeight = "50px";
            //line.style.backgroundColor = "#fff";
            //line.style.borderColor = "#000";
            line.style.verticalAlign = "middle";
            line.innerHTML = (resultValues[i][j]).toFixed(5);
            line.style.padding = "5px";
            column.appendChild(line);
        }
    }
}
showDefRating();


/*invoke all the functions to do first stage of MMAM*/
function defRatingEvents() {
    for (var k = 0; k < alternativeValues.length; k++) {
        resultValues[k] = [];
    }
    for (var i = 0; i < parameterNames.length; i++) {
        table1(tableOfinterconectionsChanged[i], alternativeValuesNormal[i]);
        for (var j = 0; j < resultPvalues.length; j++) {
            if (j === (resultPvalues.length - 1)) {
                resultValues[i].push(1 + resultPvalues[j] - resultPvalues.reduce(function (previousValue, currentValue, array, index) {
                    return previousValue + currentValue;
                }));
            } else {
                resultValues[i].push(resultPvalues[j]);
            }
        }
    }
}

document.write("Event 1<br/>");
defRatingEvents();


function showEventsTable() {
    var table = document.getElementById("events");
    for (var i = 0; i < alternativeValues.length; i++) {
        var column = document.createElement("div");
        column.className = "column";
        column.style.width = width + "px";
        table.appendChild(column);

        var header = document.createElement("div");
        header.className = "header";
        header.innerHTML = parameterNames[i];
        column.appendChild(header);

        for (var j = 0; j < alternativeValues[i].length; j++) {
            var line = document.createElement("div");
            line.className = "line";
            line.style.height = "70px";
            line.style.lineHeight = "50px";
            line.style.verticalAlign = "middle";
            line.innerHTML = Number((resultValues[i][j]).toFixed(5));
            column.appendChild(line);
        }
    }
}
//showEventsTable();
document.write("Event 2<br/>");
useEvent(event2);
normalize(alternativesWithEvent);
alternativeValuesNormal = [];
for(var i = 0; i < alternativesWithEventsNormalized.length; i++){
    alternativeValuesNormal[i] = [];
    for(var j = 0; j < alternativesWithEventsNormalized[i].length; j++){
       alternativeValuesNormal[i][j] = alternativesWithEventsNormalized[i][j];
    }
}
defRatingEvents();
/*resultValues = [
    [
        0.21855, 0.177774, 0.05392, 0.1574, 0.17258, 0.14758, 0.07223
    ],
    [
        
    ]
];*/
showEventsTable();

/*useEvent(trend2);
normalize(alternativesWithEvent);
defRatingEvents();
showEventsTable();
*/

function matrixOfInterconnections() {
    var numberOfParameters = parameterNames.length;
    var width = Number(((document.documentElement.clientWidth - 70) / numberOfParameters).toFixed(0));
    var matrixInterconnections = document.getElementById("table_interconnections");

    var column = document.createElement("div");
    column.className = "column_table_interconections";
    column.style.width = (width / 2) + "px";
    matrixInterconnections.appendChild(column);

    var empty = document.createElement("div");
    empty.style.height = "100px";
    column.appendChild(empty);

    for (var j = 1; j < numberOfParameters; j++) {
        /*for the first column*/
        var block = document.createElement("div");
        block.style.height = (alternativeValues[j].length * 22) + "px";
        column.appendChild(block);

        var parameter = document.createElement("div");
        parameter.className = "parameter";
        parameter.innerHTML = "P" + (j + 1);
        parameter.style.fontSize = "1.2em";
        parameter.style.fontWeight = "bold";
        parameter.style.height = (alternativeValues[j].length * 25) + "px";
        parameter.style.lineHeight = (alternativeValues[j].length * 25) + "px";
        parameter.style.width = (width / 4) + "px";
        block.appendChild(parameter);

        for (var k = 0; k < alternativeValues[j].length; k++) {
            var el = document.createElement("div");
            el.className = "el";
            el.style.width = (width / 4 - 5) + "px";
            el.innerHTML = (j + 1) + "" + (k + 1);
            block.appendChild(el);
        }
    }
    for (var i = 0; i < numberOfParameters - 1; i++) {/*i - number of column*/
        /*for other part of the table*/
        var column = document.createElement("div");
        column.className = "column_table_interconections";
        column.style.border = "1px solid greenyellow";
        column.style.width = (alternativeValues[i].length * 29) + "px";//width + "px";
        matrixInterconnections.appendChild(column);

        var header = document.createElement("div");
        header.className = "header";
        header.style.height = "50px";
        header.innerHTML = "P" + (i + 1);
        column.appendChild(header);

        var header = document.createElement("div");
        header.className = "header";
        header.style.height = "50px";
        column.appendChild(header);

        for (var l = 0; l < alternativeValues[i].length; l++) {/*second line: 11, 12, ...*/
            var headEl = document.createElement("div");
            headEl.className = "element";
            headEl.style.width = 27 + "px";
            headEl.innerHTML = (i + 1) + "" + (l + 1);
            header.appendChild(headEl);
        }
        for (var m = 0; m < numberOfParameters - 1; m++) {/*insert block to the column*/
            var block = document.createElement("div");
            block.className = "block";
            /**/   block.style.height = (alternativeValues[m + 1].length * 25) + "px";
            column.appendChild(block);
            /*add info to each block*/
            for (var n = 0; n < alternativeValues[m + 1].length; n++) {/*m + 1 ?*/
                /*number of lines in a block*/
                for (var c = 0; c < alternativeValues[i].length; c++) {/*number of elements in every line; for each column it depends from the number of alternatives of the parameter but inside one column it is not changed*/
                    var element = document.createElement("div");
                    element.style.width = 27 + "px";
                    element.innerHTML = tableOfinterconections[i][m][n][c];
                    element.style.height = "25px";
                    if (tableOfinterconections[i][m][n][c] === 0) {
                        element.style.color = "#fff";
                    }
                    element.className = "element";
                    block.appendChild(element);
                }
                var clear = document.createElement("div");
                clear.className = "clearfix";
                block.appendChild(clear);
            }
        }
        /*hide elements that are not need to be filled*/
        var blocks = document.getElementById("table_interconnections").children[i + 1].children;
        for (m = 0; m < i; m++) {
            blocks[2 + m].className = "hide_block";
        }
    }
}

matrixOfInterconnections();

var secondPartParameterNames = [
    "Методи боротьби з наслідками",
    "Розробка способів/засобів запобігання наслідкам",
    "Пріоритети різних наукових розробок для подолання наслідків конфліктів",
    "Пріоритети підготовки фахівців для подолання наслідків конфліктів"
];
var secondPartParameters = [
    [
        "Допомога 'Червоного хреста'",
        "Надання фінансової допомоги для ліквідації наслідків",
        "Надання матеріальної допомоги (їжа, вода, одяг, товари першої необхідності)",
        "Надання тимчасового притулку біженцям"
    ],
    [
        "Дипломатичне врегулювання",
        "Втручання третьої сторони",
        "Розробка нових засобів оборони (протиракетні установки, системи попередженння)"
    ],
    [
        "Розробка безпечних способів розчищання територій та розбору завалів",
        "Відновлення підприємств харчової галузі",
        "Розробка альтернативних джерел енергії",
        "Відновлення та вдосконалення інфраструктури"
    ],
    [
        "Організація лікарських бригад",
        "Підготовка рятувальних загонів",
        "Організація волонтерських загонів для надання допомоги постраждалим",
        "Організація правоохоронних патрулів"
    ]
];
function secondStageParameters(id, param) {
    var table = document.getElementById(id);
    for (var j = 0; j < secondPartParameterNames.length; j++) {
        var column = document.createElement("div");
        column.className = "column";
        column.style.width = "25%";
        table.appendChild(column);
        var header = document.createElement("div");
        header.className = "header";
        //header.style.background = "lightgrey";
        header.style.fontWeight = "bold";
        //header.style.lineHeight = "70px";
        header.style.verticalAlign = "middle";
        header.innerHTML = secondPartParameterNames[j];
        //header.style.borderColor = "#000";
        column.appendChild(header);
        for (var i = 0; i < param[j].length; i++) {
            var line = document.createElement("div");
            line.className = "line";
            line.style.height = "70px";
            //line.style.background = "#fff";
            //line.style.borderColor = "#000";
            //line.style.lineHeight = "50px";
            line.style.verticalAlign = "middle";
            line.innerHTML = param[j][i];
            column.appendChild(line);
        }
    }
}
secondStageParameters("secondStageTable", secondPartParameters);

var matrixOfConnections1 = [
    [
        [0.0, 0.8, 0.0, 0.0],
        [0.7, 0.8, 0.7, 0.8],
        [0.7, 0.7, 0.6, 0.8],
        [0.0, 0.5, 0.0, 0.0],
        [0.8, 0.6, 0.0, 0.8],
        [0.0, 0.0, 0.0, 0.0],
        [0.8, 0.0, 0.8, 0.7]
    ],
    [
        [0.7, 0.6, 0.0, 0.6],
        [0.8, 0.7, 0.0, 0.6],
        [0.7, 0.0, 0.0, 0.6],
        [0.7, 0.0, 0.0, 0.6],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.7, 0.0, 0.7]
    ],
    [
        [0.0, 0.4, 0.8, 0.0],
        [0.5, 0.5, 0.0, 0.7],
        [0.4, 0.5, 0.0, 0.8],
        [0.0, 0.5, 0.6, 0.0],
        [0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.6],
        [0.0, 0.8, 0.0, 0.7],
        [0.0, 0.8, 0.0, 0.8]
    ],
    [
        [0.7, 0.5, 0.7, 0.7],
        [0.0, 0.6, 0.7, 0.7],
        [0.0, 0.6, 0.7, 0.7],
        [0.0, 0.8, 0.9, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.9, 0.0, 0.8, 0.0],
        [0.7, 0.0, 0.8, 0.0]
    ],
    [
        [0.5, 0.1, 0.0, 0.1],
        [0.8, 0.4, 0.2, 0.7],
        [0.9, 0.8, 0.7, 0.9],
        [0.5, 0.0, 0.0, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.6],
        [0.0, 0.0, 0.0, 0.8],
        [0.0, 0.7, 0.0, 0.6],
        [0.0, 0.8, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0]
    ]
];

var matrixOfConnections2 = [
    [
        [0.9, -0.1, -0.9],
        [0.4, 0.8, 0.8],
        [0.3, 0.5, 0.6],
        [0.0, 0.0, 0.5],
        [0.1, 0.8, 0.8],
        [0.1, 0.0, 0.0],
        [0.2, 0.8, 0.0]
    ],
    [
        [0.0, 0.7, 0.0],
        [0.0, 0.4, 0.8],
        [0.7, 0.0, 0.0],
        [0.7, 0.0, 0.5],
        [0.0, 0.4, 0.0],
        [0.5, 0.0, 0.0],
        [0.5, 0.0, 0.8],
        [0.0, 0.0, 0.0]
    ],
    [
        [0.9, 0.0, 0.2],
        [0.1, 0.8, 0.0],
        [0.4, 0.8, 0.0]
    ],
    [
        [0.8, 0.5, 0.0],
        [0.8, 0.5, 0.7],
        [0.8, 0.5, 0.8],
        [0.8, 0.5, 0.0],
        [0.8, 0.5, 0.0]
    ],
    [
        [0.7, 0.7, 0.0],
        [0.7, 0.7, 0.5],
        [0.7, 0.7, 0.5],
        [0.7, 0.7, 0.1]
    ],
    [
        [0.7, 0.0, 0.0],
        [0.8, 0.7, 0.7],
        [0.6, 0.0, 0.6],
        [0.5, 0.5, 0.0]
    ],
    [
        [0.7, 0.7, 0.5],
        [0.5, 0.6, 0.0],
        [0.4, 0.0, 0.0]
    ],
    [
        [0.7, 0.4, 0.1],
        [0.6, 0.5, 0.4],
        [0.4, 0.8, 0.6],
        [0.2, 0.1, 0.1]
    ],
    [
        [0.0, 0.8, 0.0],
        [0.2, 0.5, 0.0],
        [-0.5, 0.0, 0.2],
        [0.5, -0.5, -0.8],
        [0.5, -0.5, -0.8],
        [-0.8, 0.7, -0.8]
    ]
];
var matrixOfConnections3 = [
    [
        [0.0, 0.3, 0.0, 0.8],
        [0.6, 0.4, 0.8, 0.8],
        [0.7, 0.4, 0.7, 0.7],
        [0.0, 0.0, 0.8, 0.6],
        [0.8, 0.7, 0.8, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.8, 0.6, 0.0, 0.5]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.9, 0.0, 0.7, 0.8],
        [0.0, 0.6, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.6, 0.0, 0.0, 0.8],
        [0.7, 0.7, 0.7, 0.7],
        [0.8, 0.7, 0.7, 0.8],
        [0.0, 0.0, 0.0, 0.5]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.0, 0.7, 0.0, 0.7],
        [0.7, 0.6, 0.9, 0.9],
        [0.8, 0.0, 0.0, 0.7],
        [0.5, 0.8, 0.7, 0.6],
        [0.6, 0.0, 0.8, 0.7]
    ],
    [
        [0.6, 0.0, 0.0, 0.5],
        [0.7, 0.0, 0.0, 0.6],
        [0.0, 0.7, 0.8, 0.7],
        [0.0, 0.8, 0.8, 0.8]
    ],
    [
        [0.0, 0.0, 0.7, 0.0],
        [0.8, 0.0, 0.0, 0.0],
        [0.8, 0.8, 0.8, 0.8],
        [0.0, 0.9, 0.5, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.8, 0.0, 0.0, 0.5],
        [0.7, 0.0, 0.0, 0.5]
    ],
    [
        [0.7, 0.0, 0.0, 0.8],
        [0.3, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.8, 0.0, 0.0, 0.8]
    ],
    [
        [0.0, 0.0, 0.8, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.4, 0.6, 0.0, 0.5],
        [0.0, 0.4, 0.0, 0.6],
        [0.0, 0.0, 0.0, 0.4],
        [0.6, 0.0, 0.0, 0.0]
    ]
];
var matrixOfConnections4 = [
    [
        [0.9, 0.0, 0.7, 0.9],
        [0.8, 0.8, 0.7, 0.8],
        [0.6, 0.7, 0.5, 0.7],
        [0.0, 0.6, 0.0, 0.4],
        [0.9, 0.8, 0.8, 0.8],
        [0.0, 0.0, 0.0, 0.6],
        [0.8, 0.6, 0.7, 0.8]
    ],
    [
        [0.8, 0.0, 0.0, 0.9],
        [0.8, 0.8, 0.0, 0.8],
        [0.7, 0.0, 0.0, 0.0],
        [0.0, 0.4, 0.0, 0.0],
        [0.7, 0.6, 0.0, 0.0],
        [0.7, 0.6, 0.0, 0.0],
        [0.7, 0.6, 0.0, 0.0],
        [0.7, 0.6, 0.0, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.0, 0.0, 0.7, 0.0],
        [0.7, 0.8, 0.7, 0.7],
        [0.9, 0.9, 0.8, 0.8],
        [0.0, 0.6, 0.0, 0.7],
        [0.0, 0.6, 0.0, 0.7]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.8, 0.7, 0.0, 0.0],
        [0.9, 0.6, 0.0, 0.0],
        [0.8, 0.8, 0.8, 0.8],
        [0.7, 0.5, 0.8, 0.8]
    ],
    [
        [-0.9, 0.0, -0.9, -0.9],
        [0.9, 0.8, 0.8, 0.0],
        [0.9, 0.7, 0.7, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0],
        [0.9, 0.0, 0.6, 0.9],
        [0.9, 0.0, 0.5, 0.9],
        [0.8, 0.0, 0.5, 0.8],
        [0.8, 0.0, 0.0, 0.8]
    ]
];

var matrixOfConnections = [
    [
        [0.0, 0.8, 0.0, 0.0, 0.9, -0.1, -0.9, 0.0, 0.3, 0.0, 0.8, 0.9, 0.0, 0.7, 0.9],
        [0.7, 0.8, 0.7, 0.8, 0.4, 0.8, 0.8, 0.6, 0.4, 0.8, 0.8, 0.8, 0.8, 0.7, 0.8],
        [0.7, 0.7, 0.6, 0.8, 0.3, 0.5, 0.6, 0.7, 0.4, 0.7, 0.7, 0.6, 0.7, 0.5, 0.7],
        [0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.8, 0.6, 0.0, 0.6, 0.0, 0.4],
        [0.8, 0.6, 0.0, 0.8, 0.1, 0.8, 0.8, 0.8, 0.7, 0.8, 0.0, 0.9, 0.8, 0.8, 0.8],
        [0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6],
        [0.8, 0.0, 0.8, 0.7, 0.2, 0.8, 0.0, 0.6, 0.6, 0.0, 0.5, 0.8, 0.6, 0.7, 0.8]
    ],
    [
        [0.7, 0.6, 0.0, 0.6, 0.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.9],
        [0.8, 0.7, 0.0, 0.6, 0.0, 0.4, 0.8, 0.9, 0.0, 0.7, 0.8, 0.8, 0.8, 0.0, 0.8],
        [0.7, 0.0, 0.0, 0.6, 0.7, 0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.7, 0.0, 0.0, 0.0],
        [0.7, 0.0, 0.0, 0.6, 0.7, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.0, 0.6, 0.0, 0.0, 0.8, 0.7, 0.6, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.7, 0.7, 0.7, 0.7, 0.7, 0.6, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.8, 0.8, 0.7, 0.7, 0.8, 0.7, 0.6, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.7, 0.6, 0.0, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0, 0.9, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.7, 0.0, 0.7, 0.4, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.0, 0.4, 0.8, 0.0, 0.8, 0.5, 0.0, 0.0, 0.7, 0.0, 0.7, 0.0, 0.0, 0.7, 0.0],
        [0.5, 0.5, 0.0, 0.7, 0.8, 0.5, 0.7, 0.7, 0.6, 0.9, 0.9, 0.7, 0.8, 0.7, 0.7],
        [0.4, 0.5, 0.0, 0.8, 0.8, 0.5, 0.8, 0.8, 0.0, 0.0, 0.7, 0.9, 0.9, 0.8, 0.8],
        [0.0, 0.5, 0.6, 0.0, 0.8, 0.5, 0.0, 0.5, 0.8, 0.7, 0.6, 0.0, 0.6, 0.0, 0.7],
        [0.0, 0.0, 0.0, 0.0, 0.8, 0.5, 0.0, 0.6, 0.0, 0.8, 0.7, 0.0, 0.6, 0.0, 0.7]
    ],
    [
        [0.0, 0.0, 0.0, 0.0, 0.7, 0.7, 0.0, 0.6, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.6, 0.7, 0.7, 0.5, 0.7, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.8, 0.0, 0.7, 0.7, 0.7, 0.5, 0.0, 0.7, 0.8, 0.7, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.8, 0.0, 0.8, 0.7, 0.7, 0.1, 0.0, 0.8, 0.8, 0.8, 0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.7, 0.5, 0.7, 0.7, 0.7, 0.0, 0.0, 0.0, 0.0, 0.7, 0.0, 0.8, 0.7, 0.0, 0.0],
        [0.0, 0.6, 0.7, 0.7, 0.8, 0.7, 0.7, 0.8, 0.0, 0.0, 0.0, 0.9, 0.6, 0.0, 0.0],
        [0.0, 0.6, 0.7, 0.7, 0.6, 0.0, 0.6, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8],
        [0.0, 0.8, 0.9, 0.0, 0.5, 0.5, 0.0, 0.0, 0.9, 0.5, 0.0, 0.7, 0.5, 0.8, 0.8]
    ],
    [
        [0.0, 0.0, 0.0, 0.0, 0.7, 0.7, 0.5, 0.0, 0.0, 0.0, 0.0, -0.9, 0.0, -0.9, -0.9],
        [0.9, 0.0, 0.8, 0.0, 0.5, 0.6, 0.0, 0.8, 0.0, 0.0, 0.5, 0.9, 0.8, 0.8, 0.0],
        [0.7, 0.0, 0.8, 0.0, 0.4, 0.0, 0.0, 0.7, 0.0, 0.0, 0.5, 0.9, 0.7, 0.7, 0.0]
    ],
    [
        [0.5, 0.1, 0.0, 0.1, 0.7, 0.4, 0.1, 0.7, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0],
        [0.8, 0.4, 0.2, 0.7, 0.6, 0.5, 0.4, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.9, 0.8, 0.7, 0.9, 0.4, 0.8, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.5, 0.0, 0.0, 0.0, 0.2, 0.1, 0.1, 0.8, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0]
    ],
    [
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.6, 0.2, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.8, -0.5, 0.0, 0.2, 0.4, 0.6, 0.0, 0.5, 0.9, 0.0, 0.6, 0.9],
        [0.0, 0.7, 0.0, 0.6, 0.5, -0.5, -0.8, 0.0, 0.4, 0.0, 0.6, 0.9, 0.0, 0.5, 0.9],
        [0.0, 0.8, 0.0, 0.0, 0.5, -0.5, -0.8, 0.0, 0.0, 0.0, 0.4, 0.8, 0.0, 0.5, 0.8],
        [0.0, 0.0, 0.0, 0.0, -0.8, 0.7, -0.8, 0.6, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.8]
    ]
];

function showMmatrixOfConnections() {
    var table = document.getElementById("matrixOfConnections");
    //table.style.width = "50%";
    var column = document.createElement("div");
    column.className = "column";
    column.style.width = "10%";
    //column.style.marginLeft = "25%";
    table.appendChild(column);
    var empty = document.createElement("div");
    empty.style.height = "70px";
    column.appendChild(empty);

    for (var j = 0; j < alternativeValues.length; j++) {
        /*for the first column*/
        var block = document.createElement("div");
        block.style.height = (alternativeValues[j].length * 22) + "px";
        column.appendChild(block);

        for (var k = 0; k < alternativeValues[j].length; k++) {
            var el = document.createElement("div");
            el.className = "el";
            el.style.width = "100%";
            el.innerHTML = (j + 1) + "" + (k + 1);
            block.appendChild(el);
        }
    }
    //for (var l = 0; l < secondPartParameters.length; l++) {
    var column = document.createElement("div");
    column.className = "column";
    column.style.width = "70%";
    //column.style.marginLeft = "25%";
    table.appendChild(column);
    var header = document.createElement("div");
    header.className = "header";
    header.style.background = "lightgrey";
    header.style.fontWeight = "bold";
    header.style.lineHeight = "50px";
    header.style.verticalAlign = "middle";
    //header.innerHTML = "9." + (l + 1);
    header.style.borderColor = "#000";
    column.appendChild(header);
    for (var i = 0; i < matrixOfConnections.length; i++) {
        var block = document.createElement("div");
        block.className = "block";
        /**/   block.style.height = (alternativeValues[i].length * 25) + "px";
        column.appendChild(block);
        for (j = 0; j < matrixOfConnections[i].length; j++) {
            /*number of lines in a block*/
            var line = document.createElement("div");
            line.style.height = "25px";
            line.className = "line_of_matrix";
            block.appendChild(line);
            for (k = 0; k < matrixOfConnections[i][j].length; k++) {
                var element = document.createElement("div");
                element.innerHTML = matrixOfConnections[i][j][k];
                element.style.width = 55 + "px";
                element.className = "element";
                line.appendChild(element);
            }
        }
    }
    // }
}
showMmatrixOfConnections();

var columnSum = [];
var idealPoint = 0;
function secondPartTable(column) {
    idealPoint = 0;
    var allParametrsLine = [];
    var sum;
    var coefs = [];
    var ps = 1 / column[0][0].length; //change 8 to parameterNames.length
    for (var a = 0; a < column[0][0].length; a++) {
        coefs[a] = [];
    }
    columnSum = [];
    for (var q = 0; q < column[0][0].length; q++) {
        columnSum[q] = 0;
    }
    for (var i = 0; i < alternativeValues[0].length; i++) {
        for (var ii = 0; ii < column[0][i].length; ii++) {
            coefs[ii][0] = column[0][i][ii];
        }
        for (var j = 0; j < alternativeValues[1].length; j++) {
            for (var jj = 0; jj < column[1][j].length; jj++) {
                coefs[jj][1] = column[1][j][jj];
            }
            for (var k = 0; k < alternativeValues[2].length; k++) {
                for (var kk = 0; kk < column[2][k].length; kk++) {
                    coefs[kk][2] = column[2][k][kk];
                }
                for (var l = 0; l < alternativeValues[3].length; l++) {
                    for (var ll = 0; ll < column[3][l].length; ll++) {
                        coefs[ll][3] = column[3][l][ll];
                    }
                    for (var m = 0; m < alternativeValues[4].length; m++) {
                        for (var mm = 0; mm < column[4][m].length; mm++) {
                            coefs[mm][4] = column[4][m][mm];
                        }
                        for (var n = 0; n < alternativeValues[5].length; n++) {
                            for (var nn = 0; nn < column[5][n].length; nn++) {
                                coefs[nn][5] = column[5][n][nn];
                            }
                            for (var o = 0; o < alternativeValues[6].length; o++) {
                                for (var oo = 0; oo < column[6][o].length; oo++) {
                                    coefs[oo][6] = column[6][o][oo];
                                }
                                for (var p = 0; p < alternativeValues[7].length; p++) {
                                    for (var pp = 0; pp < column[7][p].length; pp++) {
                                        coefs[pp][7] = column[7][p][pp];
                                    }
                                    for (var t = 0; t < alternativeValues[8].length; t++) {
                                        for (var tt = 0; tt < column[8][t].length; tt++) {
                                            coefs[tt][8] = column[8][t][tt];
                                        }
                                        allParametrsLine = [];
                                        for (var g = 0; g < column[0][0].length; g++) {
                                            allParametrsLine[g] = ps;
                                        }
                                        sum = 0;
                                        //document.write((i + 1) + " " + (j + 1) + " " + (k + 1) + " " + (l + 1) + " " + (m + 1) + " " + (n + 1) + " " + (o + 1) + " " + (p + 1));
                                        for (g = 0; g < coefs.length; g++) {
                                            for (var h = 0; h < coefs[g].length; h++) {
                                                /*if (h > 4)
                                                 allParametrsLine[g] *= 1;
                                                 else*/
                                                allParametrsLine[g] *= (coefs[g][h] + 1);
                                            }
                                            sum += allParametrsLine[g];
                                            //document.write(allParametrsLine[g]);
                                        }
                                        //document.write(sum + "_");
                                        //if(allParametrsLine.length < 15) console.log("Less than length");
                                        var max = 0;
                                        for (var q = 0; q < coefs.length; q++) {
                                            allParametrsLine[q] = allParametrsLine[q] / sum;
                                            if (allParametrsLine[q] > max)
                                                max = allParametrsLine[q];
                                            //document.write(allParametrsLine[g] + "+");
                                            columnSum[q] += allParametrsLine[q] *
                                                    resultValues[0][i] *
                                                    resultValues[1][j] *
                                                    resultValues[2][k] *
                                                    resultValues[3][l] *
                                                    resultValues[4][m] *
                                                    resultValues[5][n] *
                                                    resultValues[6][o] *
                                                    resultValues[7][p] *
                                                    resultValues[8][t];
                                            //document.write(columnSum[q] + "_");
                                        }
                                        idealPoint += max *
                                                resultValues[0][i] *
                                                resultValues[1][j] *
                                                resultValues[2][k] *
                                                resultValues[3][l] *
                                                resultValues[4][m] *
                                                resultValues[5][n] *
                                                resultValues[6][o] *
                                                resultValues[7][p] *
                                                resultValues[8][t];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    //console.log(columnSum.length);
    for (i = 0; i < columnSum.length; i++) {
        columnSum[i] = Number(columnSum[i].toFixed(5));
        //document.write(columnSum[i] + "<br/>");
    }
    idealPoint = Number(idealPoint.toFixed(5));
    //document.write("idealPoint " + idealPoint);
}
/*document.write("Методи боротьби з наслідками");
secondPartTable(matrixOfConnections1);
document.write("Розробка способів/засобів запобігання наслідкам");
secondPartTable(matrixOfConnections2);
document.write("Пріоритети різних наукових розробок для подолання наслідків конфліктів");
secondPartTable(matrixOfConnections3);
document.write("Пріоритети підготовки фахівців для подолання наслідків конфліктів");
secondPartTable(matrixOfConnections4);*/
//secondStageParameters("secondStageResult", columnSum);
